function isNumber(e){return!isNaN(parseFloat(e))&&isFinite(e)}function initializeQuery(e,t,a,i){return e={},initializeCondition(e,t,a,i)}function initializeCondition(e,t,a,i){return e[t[2]]={plates:{},originalData:{query:a,condition:i},density:0},e[t[2]].plates[t[1]]=initializePlate(),e}function initializePlate(){return{sizes:[],circularities:[]}}function logFileOnLoadHandler(e,t,a){function i(){f+m>r.fileLength&&(m=r.fileLength-f);for(var e=0;m>e;e++){if(r.fileArr[f].match(/,/)){if(p){if(p!=c){var t='<li class="fileFail">Did not process '+r.fileName+". There seems to be an issue with your log file. The density calculated for the first plate was "+p+", however the density calcluated for the current plate ("+d+") was "+c+". This program will only accept log files in which all plate densities are the same.</li>";return s(t,r.fileErrors)}}else p=c;if(r.fileArr[f]=r.fileArr[f].replace(n,"").trim().replace(o,"").replace(/\.$/,""),d=r.fileArr[f],d.match(/(\.|\!|\@|\#|\$|\%|\^|\\|\/)/)){d.length>50&&(d=d.substr(0,50)+"...");var t='<li class="fileFail">Did not process '+r.fileName+". There seems to be an issue with your log file at line: "+(f+1)+" ("+d+"). This program will not except data containing the following characters: <pre>!, @, #, $, %, or /</pre>. In addition, it cannot contain more then 1 period.</li>";return s(t,r.fileErrors)}if(l=$.map(r.fileArr[f].split(/,/),$.trim),l.length<2||l.length>3){var t='<li class="fileFail">Did not process '+r.fileName+". There seems to be an issue with your log file at line: "+(f+1)+" ("+d+'). Queries, plates numbers and conditions must be separated by commas and cannot contain commas themselves. For example, "query,plate1,condition1" is a valid plate identifier. "qu,ery,plate1,condition1" is not.</li>';return s(t,r.fileErrors)}l[2]||0===l[2]||(l[2]="");var i=l[0],g=l[2];l[2]=l[2].toLowerCase(),l[0]=l[0].toLowerCase(),u.fData.hasOwnProperty(l[0])?u.fData[l[0]].hasOwnProperty(l[2])?u.fData[l[0]][l[2]].plates.hasOwnProperty(l[1])||(u.fData[l[0]][l[2]].plates[l[1]]=initializePlate()):u.fData[l[0]]=initializeCondition(u.fData[l[0]],l,i,g):u.fData[l[0]]=initializeQuery(u.fData[l[0]],l,i,g),c=0}else{var y=$.map(r.fileArr[f].split(/\t/),$.trim);if(void 0==y[0]||!isNumber(y[0])||y[0].match(/^-/)){dataError=y[0].length>20?y[0].substr(0,17)+"...":y[0];var t='<li class="fileFail">Did not process '+r.fileName+". There seems to be an issue with your log file at line "+(f+1)+" (plate = "+d+", data = "+dataError+").  Note that values must be positive numbers. If this is at the end of your log file the issue may be that you have extra blank lines. This program will only except positive numbers as data input.</li>";return s(t,r.fileErrors)}void 0!=y[1]&&(u.fData[l[0]][l[2]].plates[l[1]].circularities.push(y[1]),circ_flag=1),u.fData[l[0]][l[2]].plates[l[1]].sizes.push(y[0]),c++}++f}if(updateProgress(f,r.fileLength),f<r.fileLength);else{if(r.fileArr=[],$.inArray(p,densityPossibilities)<0){var t='<li class="fileFail">Did not process '+r.fileName+". The density found for this file was "+p+', however this program will only accept log files in which the plate density is one of the following values: "'+densityPossibilities.join('", "')+'".</li>';return s(t,r.fileErrors)}clearInterval(h),u.meta.fileName=r.fileName,u.meta.density=p,u.meta.batchDate=r.batchDate,u.meta.id=r.id,u.meta.lastMod=r.lastMod,u.meta.file_size=r.size,processLogDataForDisplay(u,a)}}function s(e,t){return clearInterval(h),t.append(e),a(),!1}var r=commonFileProcessProcedures(e,t);trimFile(r);var l,n=/"|'|\t/,o=/(tif|tiff|jpg|jpeg|gif|png|psd|bmp|fits|pgm|ppm|pbm|dic|dcm|dicom|pict|pic|pct|tga|ico|xbm|lsm|img|liff)$/i,d="",c=0,p=!1,u={meta:{},fData:{}},f=0,m=calculateChunksize(r,a);if(m===!1)return!1;for(var h,g=100,y=!1,D=0;!y;)if(r.fileArr[D].match(/,/)&&(y=!0),D++,D>g){var b='<li class="fileFail">Did not process '+r.fileName+'. There seems to be an issue with your log file. Could not find a line with a plate header (e.g. "query,plate#,condition.tiff").</li>';return r.fileErrors.append(b),a()}return f=D-1,h=setInterval(i,0),!0}function processLogDataForDisplay(e,t){var a=e.meta.density,i=e.meta.fileName,s=e.meta.batchDate,r=$("#goodFileTable tr.goodRow").size()+1,l=0;for(var n in e.fData)for(var o in e.fData[n]){l++;var d="rowNum"+r,c=0;for(var p in e.fData[n][o].plates)if(c++,e.fData[n][o].plates[p].circularities.length>0&&e.fData[n][o].plates[p].sizes.length!=e.fData[n][o].plates[p].circularities.length)return $("#badFileTable").append("<tr><td>"+i+"</td><td>The number of colony areas ("+e.fData[n][o].plates[p].sizes.length+") does not match the number of circularity measurements ("+e.fData[n][o].plates[p].circularities.length+') for query: "'+n+'", condition: "'+o+'", plate: "'+p+'".</td></tr>'),!1;var u=guessConditionInfo(n,o,i),f='<td class="'+d+'">'+r+'</td><td class="'+d+'">'+e.fData[n][o].originalData.query+"</td>";if(f+='<td id="condition'+r+'" class="'+d+'">'+u+'</td><td id="queryLookup'+r+'" class="'+d+'"></td>',f+='<td id="date'+r+'" class="'+d+'"><span>'+s+'</span> <input type="hidden" title="'+r+'" id="datepicker'+r+'" /> </td>',f+='<td id="plates'+r+'" class="'+d+'">'+c+'</td><td id="density'+r+'" class="'+d+'">'+a+"</td>",f+='<td id="existsInDB'+r+'" class="'+d+'"></td>',f+='<input type="checkbox" name="controlData" value="'+r+'"  style="display:inline;" /></td>',f+='<td id="uploadTD'+r+'" class="'+d+'"></td>',$("#"+e.meta.id).length>0)insertedRow=$('<tr class="goodRow">'+f+"</tr>").appendTo("#goodFileTable");else{var m='<tr class="goodRow"><td id="'+e.meta.id+'" class="fileNameRow"  title="'+i+'" rowspan="1"><strong>'+i+"</strong>";m+="<br/>Size:"+e.meta.file_size+" KB - Last Modified: "+e.meta.lastMod+"</td>"+f+"</tr>",$(m).appendTo("#goodFileTable")}addDateSelect(r),validateQuery(n,u,r,e.fData[n][o]),r++}l>0&&$("#"+e.meta.id).attr("rowspan",l),t()}function validateQuery(e,t,a,i){var s='<img src="/tools/assets/progress_small.gif" alt="spinner" name="spinner" />';$.ajax({type:"GET",url:"../experiments/verify_query",data:{query:e,condition:t},dataType:"json",beforeSend:function(){$("#queryLookup"+a).html(s)},success:function(e){var s=processQueryData(e,a,"",function(){checkIfExistsInDatabase(t,a,i)});s&&checkIfExistsInDatabase(t,a,i)},error:function(){$("#queryLookup"+a).html("Database Error"),$("#queryLookup"+a).addClass("badData"),alert("Incurred an error while attempting to validate query: "+e+", condition: "+t)}})}function checkIfExistsInDatabase(e,t,a){var i={condition:e,pwj_number:$("#queryLookup"+t+" .queryPWJ").html()};i.d_density=$("#density"+t).html(),i.number_of_plates=$("#plates"+t).html(),i.rowNum=t,i.batch_date=$("#date"+t+" span").html(),function(e,t,a){var i='<img src="/tools/assets/progress_small.gif" alt="spinner" name="spinner" />';$.ajax({type:"GET",url:"check_if_log_data_exists",data:{plasmid:t.pwj_number,condition:t.condition,density:t.d_density},dataType:"json",beforeSend:function(){$("#existsInDB"+e).html(i)},success:function(i){if(i.hasOwnProperty("comments")&&i.comments.match(/not found/i))$("#existsInDB"+e).html('<img src="/tools/assets/no.png"/>'),$("#uploadTD"+e).html(uploadButton(e)+'<textarea class="allData" id="dataset'+e+'" name="dataset['+e+']">'+JSON.stringify(a)+"</textarea>"),$("#uploadTD"+e).removeClass("badData");else{$("#existsInDB"+e).html('<img src="/tools/assets/yes.png"/>');for(var s=0;s<i.length;s++){var r="";if(r+=compareOldToNewJSON("pwj_number",t,i[s],e),r+=compareOldToNewJSON("condition",t,i[s],e),r+=compareOldToNewJSON("d_density",t,i[s],e),r+=compareOldToNewJSON("number_of_plates",t,i[s],e),r+=compareOldToNewJSON("batch_date",t,i[s],e),ec=0==$("#dupTable"+e+" tr").length%2?"":'class="alt"',$("#dupTable"+e).length>0)$("#dupTable"+e+" tbody").append("<tr "+ec+">"+r+"</tr>");else{var l='<tr id="dupRow'+e+'" class="toggleRow"><td class="toggleTD" colspan="10">';l+='<div class="toggleRowDiv" id="dupTable'+e+'"><table class="ui-widget dupDataTable">',l+='<thead class="ui-widget-header">',l+="	<tr>",l+="		<th>Upload?</th>",l+="		<th>Plasmid</th>",l+="		<th>Condition</th>",l+="		<th>Density</th>",l+="		<th># Plates</th>",l+='		<th class="nowrap">',l+="			Batch Date",l+='			<span class="question" id="badBatchDate'+e+'" title="This is the date that this screen was performed. For consistancy, it should corrispond to the date the mating was performed.">?</span>',l+="		</th>",l+="	</tr>",l+="</thead>",l+='<tbody class="ui-widget-content">',l+="<tr class='alt'><td rowspan='"+i.length+"'>Upload <div class='nowrap;'>Anyway? <input type='checkbox' name='uploadAnyway' value='"+e+"' onchange='updateGoodTable(this, "+e+");' style='display:inline;' /><br/><small class='toggleLink' onclick='toggleDupRows("+e+");'><em>Hide</em></small></div></td>",l+=r,l+="</tbody>",l+="</table></div></tr></td>",$("#uploadTD"+e).parent().after(l),$(function(){for(var t=$("#uploadTD"+e).parent();!t.children(":first").hasClass("fileNameRow")&&t.is("tr");)t=t.prev();t.children(":first").attr("rowspan",parseInt(t.children(":first").attr("rowspan"))+1)}),$("#dupTable"+e+" .question").each(function(){var e=$(this).attr("id");$("#"+e).tooltip({track:!0,fade:250,delay:0})})}}$("#uploadTD"+e).html('<span class="badData toggleLink">Dups - click to view</span><textarea id="dataset'+e+'" name="dataset['+e+']" class="allData">'+JSON.stringify(a)+"</textarea>"),$("#uploadTD"+e).addClass("badData"),$("#uploadTD"+e+" span").click(function(){toggleDupRows(e)})}},error:function(){$("#existsInDB"+e).html("Database error looking for dups.")}})}(t,i,a)}function buildData(e){var t=1,a=function(e,t,a){return"<input type='hidden' name='"+t+"["+e+"]' value ='"+a+"'/>"},i=function(e,t,a){return"<textarea  name='"+t+"["+e+"]'>"+a+"</textarea>"},s=document.createElement("form"),r=$("#queryLookup"+e+" .queryPWJ").html().trim(),l=a(t,"pwj_plasmid",r),n=$("#condition"+e).html().trim();return l+=a(t,"condition",n),l+=a(t,"density",$("#density"+e).html().trim()),l+=a(t,"date",$("#date"+e+" span").html().trim()),l+=a(t,"rowNum",e),l+=a(t,"uploaded_by",currentUser),l+=i(t,"dataset",$("#dataset"+e).html()),$(s).append(l),{form:s,setInfo:r+" - "+n}}function findFirstPlate(){}var script="/tools/cgi-bin/experiments/uploadLogFile.cgi";